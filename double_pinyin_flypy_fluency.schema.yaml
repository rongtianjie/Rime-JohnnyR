# double_pinyin_flypy_fluency.schema.yaml
# Rime schema
# encoding: utf-8

schema:
  schema_id: double_pinyin_flypy_fluency        # 更改方案标识
  name: 小鶴雙拼·語句流
  version: "fluency_0.17"
  author:
    - double pinyin layout by 鶴
    - Rime schema by 佛振 <chen.sst@gmail.com>
  description: |
    「朙月拼音＋小鶴雙拼」語句流方案。
    以空格分詞、標點或回車上屏。
  dependencies:
    - stroke                        # 带别名的 translator 所引用的字典部署时不会自动编译
    - chinese_contain_english       # 只有 translator/dictionary: 指定的字典会被编译
    - emoji                         # 因此需要设置输入方案的依赖关系，保证词典可用

switches:
  - name: ascii_mode
    reset: 0
    states: [ 中文, 西文 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: ascii_punct
    states: [ ，。, ，． ]
  - name: simplification
    states: [ 漢字, 汉字 ]
  - name: ascii_punct
  #個人習慣英文標點
  reset: 1
  states: ["。，", "．，"]
simplifier:
    option_name: zh_simp
engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor        # 语句流必需，编辑器，处理空格、回车上屏、回退键等
                            # 如果你不喜欢语句流，可将其改为 express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - reverse_lookup_translator
    - script_translator
    - table_translator@chinese_contain_english      # 添加码表式副翻译器
    - table_translator@custom_phrase                # 同上
    - table_translator@emoji                        # 同上
  filters:
    - simplifier
    - uniquifier

speller:
 algebra:
    - "erase/^xx$/"
    #模糊音開始
    #- "derive/^([zcs])h/$1/"           # zh, ch, sh => z, c, s
    #- "derive/^([zcs])([^h])/$1h$2/"     # z, c, s => zh, ch, sh
    #- "derive/([i])n$/$1ng/"            # in => ing
    #- "derive/([i])ng$/$1n/"            # ing => in
    #模糊音結束
    - "derive/^([jqxy])u$/$1v/"
    - "derive/^([aoe])([ioun])$/$1$1$2/"
    - "xform/^([aoe])(ng)?$/$1$1$2/"
    - "xform/iu$/Q/"
    - "xform/(.)ei$/$1W/"
    - "xform/uan$/R/"
    - "xform/[uv]e$/T/"
    - "xform/un$/Y/"
    - "xform/^sh/U/"
    - "xform/^ch/I/"
    - "xform/^zh/V/"
    - "xform/uo$/O/"
    - "xform/ie$/P/"
    - "xform/i?ong$/S/"
    - "xform/ing$|uai$/K/"
    - "xform/(.)ai$/$1D/"
    - "xform/(.)en$/$1F/"
    - "xform/(.)eng$/$1G/"
    - "xform/[iu]ang$/L/"
    - "xform/(.)ang$/$1H/"
    - "xform/ian$/M/"
    - "xform/(.)an$/$1J/"
    - "xform/(.)ou$/$1Z/"
    - "xform/[iu]a$/X/"
    - "xform/iao$/N/"
    - "xform/(.)ao$/$1C/"
    - "xform/ui$/V/"
    - "xform/in$/B/"
    - "xlit/QWRTYUIOPSDFGHJKLZXCVBNM/qwrtyuiopsdfghjklzxcvbnm/"
  alphabet: zyxwvutsrqponmlkjihgfedcba
  delimiter: " '"
translator:
  dictionary: luna_pinyin
  prism: double_pinyin_flypy_fluency    # 由拼写运算规则产生的拼写映射表的名称
  # 去掉了 preedit_format:, 作用是输入双拼码的时候不转化为全拼码
  preedit_format:
    - "xform/([bpmfdtnljqx])n/$1iao/"
    - "xform/(\\w)g/$1eng/"
    - "xform/(\\w)q/$1iu/"
    - "xform/(\\w)w/$1ei/"
    - "xform/([dtnlgkhjqxyvuirzcs])r/$1uan/"
    - "xform/(\\w)t/$1ve/"
    - "xform/(\\w)y/$1un/"
    - "xform/([dtnlgkhvuirzcs])o/$1uo/"
    - "xform/(\\w)p/$1ie/"
    - "xform/([jqx])s/$1iong/"
    - "xform/(\\w)s/$1ong/"
    - "xform/(\\w)d/$1ai/"
    - "xform/(\\w)f/$1en/"
    - "xform/(\\w)h/$1ang/"
    - "xform/(\\w)j/$1an/"
    - "xform/([gkhvuirzcs])k/$1uai/"
    - "xform/(\\w)k/$1ing/"
    - "xform/([jqxnl])l/$1iang/"
    - "xform/(\\w)l/$1uang/"
    - "xform/(\\w)z/$1ou/"
    - "xform/([gkhvuirzcs])x/$1ua/"
    - "xform/(\\w)x/$1ia/"
    - "xform/(\\w)c/$1ao/"
    - "xform/([dtgkhvuirzcs])v/$1ui/"
    - "xform/(\\w)b/$1in/"
    - "xform/(\\w)m/$1ian/"
    - "xform/([aoe])\\1(\\w)/$1$2/"
    - "xform/(^|[ '])v/$1zh/"
    - "xform/(^|[ '])i/$1ch/"
    - "xform/(^|[ '])u/$1sh/"
    - "xform/([jqxy])v/$1u/"
    - "xform/([nl])v/$1ü/"
# 中英文混输的时候，可补全英文，并在英文两边加上半角空格
# 例如：我爱 Rime 输入法
chinese_contain_english:
  dictionary: chinese_contain_english

# 用户自定义词典，可直接编辑文件 "~/Library/Rime/custom_phrase.txt"
# db_class: stabledb 指定词典格式为文本码表格式（文字<TAB>编码<TAB>权重（可选））
custom_phrase:
  dictionary: ""
  user_dict: custom_phrase
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 1
#emoji定製
emoji_conversion:
opencc_config: emoji.json
option_name: show_emoji
tags: abc
# 可直接输入 Emoji 表情编码来输入表情
emoji:
  dictionary: emoji

reverse_lookup:
  dictionary: stroke
  enable_completion: true
  prefix: "`"
  suffix: "'"
  tips: 〔筆畫〕
  preedit_format:
    - xlit/hspnz/一丨丿丶乙/
  comment_format:
    - xform/([nl])v/$1ü/

punctuator:
  full_shape:
    " ": {commit: "　"}
    "!": {commit: "！"}
    "\"": {pair: ["“", "”"]}
    "#": ["＃", "⌘"]
    "$": ["￥", "$", "€", "£", "¥", "¢", "¤"]
    "%": ["％", "°", "℃"]
    "&": "＆"
    "'": {pair: ["‘", "’"]}
    "(": "（"
    ")": "）"
    "*": ["＊", "·", "・", "×", "※", "❂"]
    "+": "＋"
    ",": {commit: "，"}
    "-": "－"
    .: {commit: "。"}
    "/": ["／", "÷"]
    ":": {commit: "："}
    ";": {commit: "；"}
    "<": ["《", "〈", "«", "‹"]
    "=": "＝"
    ">": ["》", "〉", "»", "›"]
    "?": {commit: "？"}
    "@": ["＠", "☯"]
    "[": ["「", "【", "〔", "［"]
    "\\": ["、", "＼"]
    "]": ["」", "】", "〕", "］"]
    "^": {commit: "……"}
    _: "——"
    "`": "｀"
    "{": ["『", "〖", "｛"]
    "|": ["·", "｜", "§", "¦"]
    "}": ["』", "〗", "｝"]
    "~": "～"
  half_shape:
    "!": {commit: "！"}
    "\"": {pair: ["“", "”"]}
    "#": "#"
    "$": ["￥", "$", "€", "£", "¥", "¢", "¤"]
    "%": ["%", "％", "°", "℃"]
    "&": "&"
    "'": {pair: ["‘", "’"]}
    "(": "（"
    ")": "）"
    "*": ["*", "＊", "·", "・", "×", "※", "❂"]
    "+": "+"
    ",": {commit: "，"}
    "-": "-"
    .: {commit: "。"}
    "/": ["、", "/", "／", "÷"]
    ":": {commit: "："}
    ";": {commit: "；"}
    "<": ["《", "〈", "«", "‹"]
    "=": "="
    ">": ["》", "〉", "»", "›"]
    "?": {commit: "？"}
    "@": "@"
    "[": ["「", "【", "〔", "［"]
    "\\": ["、", "\\", "＼"]
    "]": ["」", "】", "〕", "］"]
    "^": {commit: "……"}
    _: "——"
    "`": "`"
    "{": ["『", "〖", "｛"]
    "|": ["·", "|", "｜", "§", "¦"]
    "}": ["』", "〗", "｝"]
    "~": ["~", "～"]
  import_preset: default
key_binder:
  bindings:
    - {accept: "Control+p", send: Up, when: composing}
    - {accept: "Control+n", send: Down, when: composing}
    - {accept: "Control+b", send: Left, when: composing}
    - {accept: "Control+f", send: Right, when: composing}
    - {accept: "Control+a", send: Home, when: composing}
    - {accept: "Control+e", send: End, when: composing}
    - {accept: "Control+d", send: Delete, when: composing}
    - {accept: "Control+k", send: "Shift+Delete", when: composing}
    - {accept: "Control+h", send: BackSpace, when: composing}
    - {accept: "Control+g", send: Escape, when: composing}
    - {accept: "Control+bracketleft", send: Escape, when: composing}
    - {accept: "Alt+v", send: Page_Up, when: composing}
    - {accept: "Control+v", send: Page_Down, when: composing}
    - {accept: ISO_Left_Tab, send: "Shift+Left", when: composing}
    - {accept: "Shift+Tab", send: "Shift+Left", when: composing}
    - {accept: Tab, send: "Shift+Right", when: composing}
    - {accept: minus, send: Page_Up, when: has_menu}
    - {accept: equal, send: Page_Down, when: has_menu}
    - {accept: comma, send: Page_Up, when: paging}
    - {accept: period, send: Page_Down, when: has_menu}
    - {accept: "Control+Shift+1", select: .next, when: always}
    - {accept: "Control+Shift+2", toggle: ascii_mode, when: always}
    - {accept: "Control+Shift+3", toggle: full_shape, when: always}
    - {accept: "Control+Shift+4", toggle: simplification, when: always}
    - {accept: "Control+Shift+5", toggle: extended_charset, when: always}
    - {accept: "Control+Shift+exclam", select: .next, when: always}
    - {accept: "Control+Shift+at", toggle: ascii_mode, when: always}
    - {accept: "Control+Shift+numbersign", toggle: full_shape, when: always}
    - {accept: "Control+Shift+dollar", toggle: simplification, when: always}
    - {accept: "Control+Shift+percent", toggle: extended_charset, when: always}
    - {accept: "Shift+space", toggle: full_shape, when: always}
    - {accept: "Control+period", toggle: ascii_punct, when: always}
  import_preset: default
recognizer:
  import_preset: default
  patterns:
    number: "^[-+]?[0-9][.:0-9]*[%]?$"
    # 配合特殊符号的输入
    punct: "^/[0-9]*[a-z]*$"
    reverse_lookup: "`[a-z]*'?$"
    email: "^[A-Za-z][-_.0-9A-Za-z]*@.*$"
    # reverse_lookup: "`[a-z]*'?$"
    uppercase: "[A-Z][-_+.'0-9A-Za-z]*$"
    url: "^(www[.]|https?:|ftp[.:]|mailto:|file:).*$|^[a-z]+[.].+$"
